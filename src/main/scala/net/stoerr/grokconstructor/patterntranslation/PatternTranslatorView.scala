package net.stoerr.grokconstructor.patterntranslation

import java.util.logging.Logger
import javax.servlet.http.HttpServletRequest

import net.stoerr.grokconstructor.matcher.{MatcherEntryView, MatcherForm}
import net.stoerr.grokconstructor.webframework.WebViewWithHeaderAndSidebox

import scala.util.{Failure, Success, Try}
import scala.xml.NodeSeq

/**
  * Created by hps on 13.04.2016.
  */
class PatternTranslatorView(val request: HttpServletRequest) extends WebViewWithHeaderAndSidebox {

  private val logger = Logger.getLogger("PatternTranslatorView")

  override val title: String = "Pattern Translation"
  val form = PatternTranslatorForm(request)

  override def action = PatternTranslatorView.path

  override def maintext: NodeSeq = <p>This tries to generate a
    <a href="http://logstash.net/docs/latest/filters/grok">grok regular expression</a>
    from a log4j
    <a href="https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html">PatternLayout</a>
    format that parses the logfile output generated by that format.
    You will want to check and refine the pattern with the
    <a href={fullpath(MatcherEntryView.path)}>matcher</a>
    .
  </p> ++ <p>
    This is currently very experimental - don't expect it to work or anything. :-)
    Please report problems and, if possible, make good
    suggestions how to translate troublesome placeholders to a appropriate grok expressions.</p> ++
    <p>It would be comparatively easy to extend this to other logging libraries like logback etc.
      if someone comes up with good suggestions how to translate the different placeholders.</p> ++
    <p>Please enter the log4j pattern and then press</p> ++ submit("Go!")

  override def sidebox: NodeSeq = <p>The sidebox</p>

  def formparts: NodeSeq = form.patternEntry ++ resultPart

  override def result: NodeSeq = <span/>

  def resultPart = form.format.value.map(showResult).getOrElse(<span/>)

  def showResult(pat: String): NodeSeq =
    table(Try(Log4jTranslator.translate(pat)) match {
      case Success(translated) =>
        form.result.value = Some(translated)
        row(form.result.inputTextArea("Constructed grok pattern", 180, 6, false))
      case Failure(TranslationException(message)) =>
        warn(s"The pattern could not be translated because : $message")
      case Failure(otherException) => throw otherException
    })

}


object PatternTranslatorView {

  val path = "/translator"

}
